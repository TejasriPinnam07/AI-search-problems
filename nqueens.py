# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BzJIl6-c4opOEtHEfq6-S1KcgjUVZ3rB
"""

import time
from IPython.display import display, HTML, clear_output

def can_place_queen(board, row, col, size):
    """Verify if a queen can be safely placed at the given position."""
    # Check the current row on the left
    for c in range(col):
        if board[row][c] == 1:
            return False

    # Check the upper diagonal on the left
    for r, c in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[r][c] == 1:
            return False

    # Check the lower diagonal on the left
    for r, c in zip(range(row, size), range(col, -1, -1)):
        if board[r][c] == 1:
            return False

    return True

def place_queens(board, col, size):
    """Recursive function to solve the N-Queens problem using backtracking."""
    if col == size:  # All queens are placed
        return True

    for row in range(size):
        if can_place_queen(board, row, col, size):
            # Place the queen
            board[row][col] = 1
            visualize_board(board, size, f"Placing Queen in Column {col + 1}")

            # Recursively attempt to place the rest of the queens
            if place_queens(board, col + 1, size):
                return True

            # Backtrack if placing here doesn't lead to a solution
            board[row][col] = 0
            visualize_board(board, size, f"Backtracking from Column {col + 1}")

    return False  # No valid placement found for this column

def visualize_board(board, size, status):
    """Render the chessboard in HTML format."""
    board_html = "<table style='border-collapse: collapse; text-align: center;'>"
    for i in range(size):
        board_html += "<tr>"
        for j in range(size):
            # Alternate colors for a chessboard pattern
            cell_color = "#f3f3f3" if (i + j) % 2 == 0 else "#555"
            content = "&#9819;" if board[i][j] == 1 else "&nbsp;"  # Black queen
            board_html += f"<td style='width: 30px; height: 30px; background-color: {cell_color}; border: 1px solid black;'>{content}</td>"
        board_html += "</tr>"
    board_html += "</table>"

    clear_output(wait=True)
    display(HTML(f"<h3>{status}</h3>{board_html}"))
    time.sleep(1)  # Pause for a brief moment to visualize changes

def solve_n_queens_problem(size):
    """Initialize the board and attempt to solve the N-Queens problem."""
    board = [[0] * size for _ in range(size)]  # Create an empty chessboard

    if not place_queens(board, 0, size):
        print("No solution exists for the given board size.")
    else:
        visualize_board(board, size, "Final Solution")

# Main entry point
if __name__ == "__main__":
    n = 8
    solve_n_queens_problem(n)